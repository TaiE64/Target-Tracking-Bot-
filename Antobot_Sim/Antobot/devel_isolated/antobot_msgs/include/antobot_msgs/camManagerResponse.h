// Generated by gencpp from file antobot_msgs/camManagerResponse.msg
// DO NOT EDIT!


#ifndef ANTOBOT_MSGS_MESSAGE_CAMMANAGERRESPONSE_H
#define ANTOBOT_MSGS_MESSAGE_CAMMANAGERRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace antobot_msgs
{
template <class ContainerAllocator>
struct camManagerResponse_
{
  typedef camManagerResponse_<ContainerAllocator> Type;

  camManagerResponse_()
    : responseCode(0)
    , responseString()  {
    }
  camManagerResponse_(const ContainerAllocator& _alloc)
    : responseCode(0)
    , responseString(_alloc)  {
  (void)_alloc;
    }



   typedef int8_t _responseCode_type;
  _responseCode_type responseCode;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _responseString_type;
  _responseString_type responseString;





  typedef boost::shared_ptr< ::antobot_msgs::camManagerResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::antobot_msgs::camManagerResponse_<ContainerAllocator> const> ConstPtr;

}; // struct camManagerResponse_

typedef ::antobot_msgs::camManagerResponse_<std::allocator<void> > camManagerResponse;

typedef boost::shared_ptr< ::antobot_msgs::camManagerResponse > camManagerResponsePtr;
typedef boost::shared_ptr< ::antobot_msgs::camManagerResponse const> camManagerResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::antobot_msgs::camManagerResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::antobot_msgs::camManagerResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::antobot_msgs::camManagerResponse_<ContainerAllocator1> & lhs, const ::antobot_msgs::camManagerResponse_<ContainerAllocator2> & rhs)
{
  return lhs.responseCode == rhs.responseCode &&
    lhs.responseString == rhs.responseString;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::antobot_msgs::camManagerResponse_<ContainerAllocator1> & lhs, const ::antobot_msgs::camManagerResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace antobot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::antobot_msgs::camManagerResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::antobot_msgs::camManagerResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::antobot_msgs::camManagerResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::antobot_msgs::camManagerResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::antobot_msgs::camManagerResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::antobot_msgs::camManagerResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::antobot_msgs::camManagerResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ffae894553e78674a1fb889cfce79059";
  }

  static const char* value(const ::antobot_msgs::camManagerResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xffae894553e78674ULL;
  static const uint64_t static_value2 = 0xa1fb889cfce79059ULL;
};

template<class ContainerAllocator>
struct DataType< ::antobot_msgs::camManagerResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "antobot_msgs/camManagerResponse";
  }

  static const char* value(const ::antobot_msgs::camManagerResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::antobot_msgs::camManagerResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 responseCode		# 0 - success, -1 - failure\n"
"string responseString   # Additional info\n"
"\n"
;
  }

  static const char* value(const ::antobot_msgs::camManagerResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::antobot_msgs::camManagerResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.responseCode);
      stream.next(m.responseString);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct camManagerResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::antobot_msgs::camManagerResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::antobot_msgs::camManagerResponse_<ContainerAllocator>& v)
  {
    s << indent << "responseCode: ";
    Printer<int8_t>::stream(s, indent + "  ", v.responseCode);
    s << indent << "responseString: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.responseString);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ANTOBOT_MSGS_MESSAGE_CAMMANAGERRESPONSE_H
