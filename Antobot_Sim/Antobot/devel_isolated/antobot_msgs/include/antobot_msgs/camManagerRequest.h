// Generated by gencpp from file antobot_msgs/camManagerRequest.msg
// DO NOT EDIT!


#ifndef ANTOBOT_MSGS_MESSAGE_CAMMANAGERREQUEST_H
#define ANTOBOT_MSGS_MESSAGE_CAMMANAGERREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace antobot_msgs
{
template <class ContainerAllocator>
struct camManagerRequest_
{
  typedef camManagerRequest_<ContainerAllocator> Type;

  camManagerRequest_()
    : camera_num(0)
    , command(0)  {
    }
  camManagerRequest_(const ContainerAllocator& _alloc)
    : camera_num(0)
    , command(0)  {
  (void)_alloc;
    }



   typedef int8_t _camera_num_type;
  _camera_num_type camera_num;

   typedef int8_t _command_type;
  _command_type command;





  typedef boost::shared_ptr< ::antobot_msgs::camManagerRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::antobot_msgs::camManagerRequest_<ContainerAllocator> const> ConstPtr;

}; // struct camManagerRequest_

typedef ::antobot_msgs::camManagerRequest_<std::allocator<void> > camManagerRequest;

typedef boost::shared_ptr< ::antobot_msgs::camManagerRequest > camManagerRequestPtr;
typedef boost::shared_ptr< ::antobot_msgs::camManagerRequest const> camManagerRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::antobot_msgs::camManagerRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::antobot_msgs::camManagerRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::antobot_msgs::camManagerRequest_<ContainerAllocator1> & lhs, const ::antobot_msgs::camManagerRequest_<ContainerAllocator2> & rhs)
{
  return lhs.camera_num == rhs.camera_num &&
    lhs.command == rhs.command;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::antobot_msgs::camManagerRequest_<ContainerAllocator1> & lhs, const ::antobot_msgs::camManagerRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace antobot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::antobot_msgs::camManagerRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::antobot_msgs::camManagerRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::antobot_msgs::camManagerRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::antobot_msgs::camManagerRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::antobot_msgs::camManagerRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::antobot_msgs::camManagerRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::antobot_msgs::camManagerRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c063391607e68c264c6221ac3f45ede5";
  }

  static const char* value(const ::antobot_msgs::camManagerRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc063391607e68c26ULL;
  static const uint64_t static_value2 = 0x4c6221ac3f45ede5ULL;
};

template<class ContainerAllocator>
struct DataType< ::antobot_msgs::camManagerRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "antobot_msgs/camManagerRequest";
  }

  static const char* value(const ::antobot_msgs::camManagerRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::antobot_msgs::camManagerRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 camera_num		    # 0 - front, 1 - back, 2 - left, 3 - right\n"
"int8 command			# 0 - close/turn off, 1 - launch ROS code, 2 - start recording video\n"
;
  }

  static const char* value(const ::antobot_msgs::camManagerRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::antobot_msgs::camManagerRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.camera_num);
      stream.next(m.command);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct camManagerRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::antobot_msgs::camManagerRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::antobot_msgs::camManagerRequest_<ContainerAllocator>& v)
  {
    s << indent << "camera_num: ";
    Printer<int8_t>::stream(s, indent + "  ", v.camera_num);
    s << indent << "command: ";
    Printer<int8_t>::stream(s, indent + "  ", v.command);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ANTOBOT_MSGS_MESSAGE_CAMMANAGERREQUEST_H
