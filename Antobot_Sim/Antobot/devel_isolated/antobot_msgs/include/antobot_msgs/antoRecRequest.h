// Generated by gencpp from file antobot_msgs/antoRecRequest.msg
// DO NOT EDIT!


#ifndef ANTOBOT_MSGS_MESSAGE_ANTORECREQUEST_H
#define ANTOBOT_MSGS_MESSAGE_ANTORECREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace antobot_msgs
{
template <class ContainerAllocator>
struct antoRecRequest_
{
  typedef antoRecRequest_<ContainerAllocator> Type;

  antoRecRequest_()
    : command(0)  {
    }
  antoRecRequest_(const ContainerAllocator& _alloc)
    : command(0)  {
  (void)_alloc;
    }



   typedef int8_t _command_type;
  _command_type command;





  typedef boost::shared_ptr< ::antobot_msgs::antoRecRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::antobot_msgs::antoRecRequest_<ContainerAllocator> const> ConstPtr;

}; // struct antoRecRequest_

typedef ::antobot_msgs::antoRecRequest_<std::allocator<void> > antoRecRequest;

typedef boost::shared_ptr< ::antobot_msgs::antoRecRequest > antoRecRequestPtr;
typedef boost::shared_ptr< ::antobot_msgs::antoRecRequest const> antoRecRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::antobot_msgs::antoRecRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::antobot_msgs::antoRecRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::antobot_msgs::antoRecRequest_<ContainerAllocator1> & lhs, const ::antobot_msgs::antoRecRequest_<ContainerAllocator2> & rhs)
{
  return lhs.command == rhs.command;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::antobot_msgs::antoRecRequest_<ContainerAllocator1> & lhs, const ::antobot_msgs::antoRecRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace antobot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::antobot_msgs::antoRecRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::antobot_msgs::antoRecRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::antobot_msgs::antoRecRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::antobot_msgs::antoRecRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::antobot_msgs::antoRecRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::antobot_msgs::antoRecRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::antobot_msgs::antoRecRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "481ac5a494c3140a2539020bd74c82c7";
  }

  static const char* value(const ::antobot_msgs::antoRecRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x481ac5a494c3140aULL;
  static const uint64_t static_value2 = 0x2539020bd74c82c7ULL;
};

template<class ContainerAllocator>
struct DataType< ::antobot_msgs::antoRecRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "antobot_msgs/antoRecRequest";
  }

  static const char* value(const ::antobot_msgs::antoRecRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::antobot_msgs::antoRecRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 command	# 0 - open cam 1 - close cam, 2 - start recording, 3 - stop recording\n"
;
  }

  static const char* value(const ::antobot_msgs::antoRecRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::antobot_msgs::antoRecRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.command);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct antoRecRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::antobot_msgs::antoRecRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::antobot_msgs::antoRecRequest_<ContainerAllocator>& v)
  {
    s << indent << "command: ";
    Printer<int8_t>::stream(s, indent + "  ", v.command);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ANTOBOT_MSGS_MESSAGE_ANTORECREQUEST_H
